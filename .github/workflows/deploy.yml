name: Deploy Laravel Project to EC2

on:
  push:
    branches:
      - main # Trigger deployment when pushing to the `main` branch

jobs:
  deploy:
    name: Deploy Laravel Project
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up PHP
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1' # Use the version of PHP your project requires
          extensions: mbstring, exif, pcntl, bcmath, curl, intl, mysql # Add extensions as needed
          tools: composer, npm # Include Composer and npm

      # Step 3: Install Composer dependencies
      - name: Install PHP dependencies
        run: composer install --no-progress --no-suggest --prefer-dist

      # Step 4: Install Node.js and npm dependencies
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18' # Use the version of Node.js your project requires

      - name: Install Node.js dependencies
        run: npm install

      # Step 5: Copy and configure .env file
      - name: Set up environment variables
        run: |
          cp .env.example .env
          echo "APP_KEY=" >> .env # Add APP_KEY dynamically in the next step
          echo "FILESYSTEM_DISK=public" >> .env

      # Step 6: Generate application key
      - name: Generate application key
        run: php artisan key:generate

      # Step 7: Create symbolic link for storage
      - name: Create storage link
        run: php artisan storage:link

      # Debugging Section: Test Database Connectivity
      - name: Test Database Connectivity
        run: |
          php -r "try { 
            new PDO('mysql:host=${{ secrets.DB_HOST }};dbname=${{ secrets.DB_DATABASE }}', '${{ secrets.DB_USERNAME }}', '${{ secrets.DB_PASSWORD }}'); 
            echo 'Database connection successful!'; 
          } catch (Exception $e) { 
            echo 'Database connection failed: ' . $e->getMessage(); 
            exit(1); 
          };"

      # Debugging Section: Ensure Database Exists
      - name: Ensure Database Exists
        run: |
          mysql -h ${{ secrets.DB_HOST }} -u ${{ secrets.DB_USERNAME }} -p${{ secrets.DB_PASSWORD }} -e "CREATE DATABASE IF NOT EXISTS \`${{ secrets.DB_DATABASE }}\`;"

      # Step 8: Migrate the database
      - name: Migrate the database
        env:
          DB_CONNECTION: mysql
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: 3306
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          php artisan migrate --force

      # Step 9: Deploy to EC2 (via SSH)
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: 22
          script: |
            cd /var/www/html/My-Project- # Adjust the path to your project directory
            git pull origin main
            composer install --no-dev --optimize-autoloader
            npm install --production
            php artisan migrate --force
            php artisan config:cache
            php artisan route:cache
            php artisan storage:link
            sudo systemctl restart nginx php8.1-fpm
